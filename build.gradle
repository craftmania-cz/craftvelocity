plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = 'cz.craftmania'
version = '1.0'

repositories {
    flatDir { dirs 'libs' }
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }

    maven {
        url 'https://jitpack.io'
    }

    maven { url "https://s01.oss.sonatype.org/content/repositories/releases" }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.3.0-SNAPSHOT'
    annotationProcessor 'com.velocitypowered:velocity-api:3.3.0-SNAPSHOT'

    // Mayuna's libraries
    implementation 'dev.mayuna:simple-java-api-wrapper:2.3'
    implementation 'dev.mayuna:pumpk1n:2.2'

    // HikariCP / MySQL
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'mysql:mysql-connector-java:8.0.33'

    // NuVotifier
    compileOnly name: 'nuvotifier'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // JetBrain's annotations
    compileOnly 'org.jetbrains:annotations:16.0.2'
}

shadowJar() {
    relocate 'co.aikar.commands', 'cz.craftmania.craftvelocity.acf'
    relocate 'co.aikar.locales', 'cz.craftmania.craftvelocity.locales'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}